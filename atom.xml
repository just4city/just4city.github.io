<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://just4city.github.io</id>
    <title>Gridea</title>
    <updated>2020-02-23T02:12:42.034Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://just4city.github.io"/>
    <link rel="self" href="https://just4city.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://just4city.github.io/images/avatar.png</logo>
    <icon>https://just4city.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Nest.js使用TypeORM]]></title>
        <id>https://just4city.github.io/post/nestjs-shi-yong-typeorm/</id>
        <link href="https://just4city.github.io/post/nestjs-shi-yong-typeorm/">
        </link>
        <updated>2020-02-22T15:26:15.000Z</updated>
        <content type="html"><![CDATA[<h4 id="需要安装的包和packagejson配置">需要安装的包和package.json配置</h4>
<pre><code class="language-bash">npm install ts-node ts-node-dev
</code></pre>
<pre><code class="language-json">{
    ...其他配置
    &quot;serve&quot;: &quot;node --inspect -r ts-node/register src/main.ts&quot;, //配合chrome浏览器调试
    &quot;serve:dev&quot;: &quot;npx ts-node-dev src/main.ts --debug --watch &quot;, //开发环境debu配置
}
</code></pre>
<h4 id="ormconfigjs配置文件">ormconfig.js配置文件</h4>
<pre><code class="language-typescript">const SOURCE_PATH = process.env.NODE_ENV === 'production' ? 'dist' : 'src';
console.log('path: ', __dirname + `/${SOURCE_PATH}/entities/*.ts`)
module.exports = {
  &quot;type&quot;: &quot;mysql&quot;,
  &quot;host&quot;: &quot;localhost&quot;,
  &quot;port&quot;: 33060,
  &quot;username&quot;: &quot;root&quot;,
  &quot;password&quot;: &quot;root&quot;,
  &quot;database&quot;: &quot;mooc_site&quot;,
  &quot;entities&quot;: [__dirname + `/${SOURCE_PATH}/entities/*{.ts,.js}`],
  &quot;synchronize&quot;: false
};
</code></pre>
<h4 id="tyconfigjson配置">tyconfig.json配置</h4>
<pre><code class="language-json">{
  &quot;compilerOptions&quot;: {
    &quot;module&quot;: &quot;commonjs&quot;,
    &quot;declaration&quot;: true,
    &quot;removeComments&quot;: true,
    &quot;emitDecoratorMetadata&quot;: true,
    &quot;experimentalDecorators&quot;: true,
    &quot;target&quot;: &quot;es2017&quot;,
    &quot;sourceMap&quot;: true,
    &quot;outDir&quot;: &quot;./dist&quot;,
    &quot;baseUrl&quot;: &quot;./src&quot;,
    &quot;incremental&quot;: true
  },
  &quot;include&quot;: [&quot;src/**/*&quot;, &quot;./ormconfig.js&quot;],
  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Nginx 反代理翻墙服务搭建]]></title>
        <id>https://just4city.github.io/post/google-nginx-fan-dai-li-fan-qiang-fu-wu-da-jian/</id>
        <link href="https://just4city.github.io/post/google-nginx-fan-dai-li-fan-qiang-fu-wu-da-jian/">
        </link>
        <updated>2020-01-08T07:38:04.000Z</updated>
        <content type="html"><![CDATA[<p>Nginx 配置</p>
<pre><code class="language-bash">upstream www.google.com {
    server 173.194.38.1:443;
    server 173.194.38.2:443;
    server 173.194.38.3:443;
    server 173.194.38.4:443;
}

server{
    listen 80;
    server_name xxoo.lol www.xxoo.lol;
    rewrite ^(.*) https://xxoo.lol/$1 permanent;
}

server{
    listen 443;
    server_name xxoo.lol;
    ssl on;
    ssl_certificate /usr/local/nginx/conf/vhost/ca/xxoo.lol.crt;
    ssl_certificate_key /usr/local/nginx/conf/vhost/ca/xxoo.lol.key;
    ssl_protocols SSLv3 TLSv1;
    ssl_ciphers ALL:-ADH:+HIGH:+MEDIUM:-LOW:-SSLv2:-EXP;

    location / {
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_pass https://www.google.com.hk;
    }
}
</code></pre>
<p>https://geek.lc/2019/11/30/google_nginx/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[axios使用GitHub API上传文件]]></title>
        <id>https://just4city.github.io/post/axios-shi-yong-github-api-shang-chuan-wen-jian/</id>
        <link href="https://just4city.github.io/post/axios-shi-yong-github-api-shang-chuan-wen-jian/">
        </link>
        <updated>2019-12-23T04:55:13.000Z</updated>
        <content type="html"><![CDATA[<h4 id="创建token">创建token</h4>
<p>登录自己的账号 进入页面生成Token <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/just4picbed/oss@master/20191223125919-5jH7lC.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/just4picbed/oss@master/20191223125931-vhRVkA.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/just4picbed/oss@master/2019122313033-BF5EzV.jpg" alt="" loading="lazy"></figure>
<h4 id="调用api接口">调用api接口</h4>
<p><code>在这里上传文件必须将文件base64的编码格式上传。然后自己指定文件上传的路径和名字 文档地址:https://developer.github.com/v3/repos/contents/</code></p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/just4picbed/oss@master/201912231320-PSetXs.jpg" alt="" loading="lazy"></figure>
<pre><code>接口地址/repos/:owner/:repo/contents/:path

提交类型 put

提交方式Content-Type:application/json

提交内容

{
  &quot;message&quot;: &quot;提交说明&quot;,
  &quot;committer&quot;: {
    &quot;name&quot;: &quot;名字&quot;,
    &quot;email&quot;: &quot;邮箱&quot;
  },
  &quot;content&quot;: &quot;将文件base64编码后的字符串&quot;
}
</code></pre>
<h4 id="示例代码">示例代码</h4>
<pre><code class="language-javascript">export const putRequest4GitHub = (url, params, header = {}) =&gt; {
    return axios.put(url, JSON.stringify(params), {
        header
    });
}

export const uploadPic2Github = (name, base64) =&gt; {
    return putRequest4GitHub(
        `https://api.github.com/repos/just4picbed/oss/contents/${name}?access_token=your_token`,
        {
            &quot;message&quot;: &quot;pic&quot;,
            &quot;committer&quot;: {
                &quot;name&quot;: &quot;pic&quot;,
                &quot;email&quot;: &quot;pic@qq.com&quot;
            },
            &quot;content&quot;: base64
        }, {&quot;Content-Type&quot;: &quot;text/plain; charset=utf-8&quot;});
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue使用keep-alive缓存，缓存页面数据更新问题解决]]></title>
        <id>https://just4city.github.io/post/vue-shi-yong-keep-alive-huan-cun-huan-cun-ye-mian-shu-ju-geng-xin-wen-ti-jie-jue/</id>
        <link href="https://just4city.github.io/post/vue-shi-yong-keep-alive-huan-cun-huan-cun-ye-mian-shu-ju-geng-xin-wen-ti-jie-jue/">
        </link>
        <updated>2019-12-21T07:30:45.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-javascript">export default {
    name: 'Demo',
    data() {
        return {}
    },
    beforeRouteEnter(to, from, next) {
        next(vm =&gt; {
            vm.getData();
        });
    },
    mounted() {
        this.getData();
    },
    methods: {
        async getData() {
            //获取数据
        }
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git删除远程文件夹或文件的方法]]></title>
        <id>https://just4city.github.io/post/git-shan-chu-yuan-cheng-wen-jian-jia-huo-wen-jian-de-fang-fa/</id>
        <link href="https://just4city.github.io/post/git-shan-chu-yuan-cheng-wen-jian-jia-huo-wen-jian-de-fang-fa/">
        </link>
        <updated>2019-12-12T09:33:47.000Z</updated>
        <content type="html"><![CDATA[<p>由于本地修改了文件夹大全名大小写的原因，同步到git上并不区分大小写，造成了一些文件同步不了，所以要先把git远程库上文件夹删除掉，然后再重新同步。</p>
<p>如下，我把src里的全部移除，但是本地文件还保留。</p>
<pre><code class="language-bash">git rm -r -n --cached  */src/\*      //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。

git rm -r --cached  */src/\*      //最终执行命令.

git commit -m&quot;移除src目录下所有文件的版本控制&quot;    //提交

git push origin master   //提交到远程服务器

</code></pre>
<p>若用<code>git status</code>命令查看，则<code>/src/</code>目录下文件出现在结果列表里， 我们不希望这个目录下的文件出现，则在项目根目录下，和<code>.git</code>同级目录下，新建一个<code>.gitignore</code>文件，</p>
<p>把<code>.gitignore</code>提交到远程服务器。 则<code>/src</code>目录就不会被提交了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adonis.js在开发模式Debug]]></title>
        <id>https://just4city.github.io/post/adonisjs-zai-kai-fa-mo-shi-debug/</id>
        <link href="https://just4city.github.io/post/adonisjs-zai-kai-fa-mo-shi-debug/">
        </link>
        <updated>2019-12-11T02:22:00.000Z</updated>
        <content type="html"><![CDATA[<p>使用<code>adonis serve --dev --debug</code>无法进行<code>debug</code>。</p>
<p>解决方法：</p>
<pre><code class="language-javascript">
npm install -g nodemon

//package.json中设置
&quot;scripts&quot;: {
    &quot;debug&quot;: &quot;nodemon --inspect --trace-warnings server.js&quot;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 修改pip 镜像源]]></title>
        <id>https://just4city.github.io/post/mac-xiu-gai-pip-jing-xiang-yuan/</id>
        <link href="https://just4city.github.io/post/mac-xiu-gai-pip-jing-xiang-yuan/">
        </link>
        <updated>2019-12-04T02:58:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="创建配置文件">创建配置文件</h3>
<blockquote>
<p>1.进入根目录：cd ~/<br>
2.进入.pip目录 cd .pip<br>
3.如果不存在文件夹就新建mkdir .pip<br>
4.进入 cd .pip<br>
5.创建pip.conf文件 touch pip.conf<br>
6.修改：vim pip.conf</p>
</blockquote>
<h3 id="修改配置文件">修改配置文件</h3>
<pre><code class="language-bash">[global]
index-url=http://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
</code></pre>
<h3 id="临时使用镜像源">临时使用镜像源</h3>
<pre><code class="language-bash">pip install request -i https://pypi.douban.com/simple
</code></pre>
<p>参考：<br>
<a href="https://www.jianshu.com/p/f771e1120003">Mac 修改pip 镜像源</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python的虚拟环境]]></title>
        <id>https://just4city.github.io/post/python-de-xu-ni-huan-jing/</id>
        <link href="https://just4city.github.io/post/python-de-xu-ni-huan-jing/">
        </link>
        <updated>2019-12-04T02:34:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="什么是虚拟环境">什么是虚拟环境</h3>
<blockquote>
<p>python特有的一种软件环境,创建多个python环境，各个环境之间完全隔离，互不影响。它可以用来解决Python项目开发和运行过程中的依赖项和版本问题，而不必和其他项目的Python环境以及全局的Python环境发生冲突。</p>
</blockquote>
<h3 id="安装">安装</h3>
<pre><code class="language-bash">pip install virtualenv
pip3 install virtualenv
</code></pre>
<h3 id="创建虚拟环境">创建虚拟环境</h3>
<pre><code class="language-bash">virtualenv  [OPTIONS]  [虚拟环境名称]
virtualenv --python=python3.7 ENV
</code></pre>
<h3 id="启动环境">启动环境</h3>
<p>新创建的虚拟环境目录中有一个启动脚本 <code>ENV/bin/activate</code> ，直接使用 <code>source</code> 命令来启动虚拟环境。</p>
<pre><code class="language-bash">source ENV/bin/activate
</code></pre>
<h3 id="退出环境">退出环境</h3>
<pre><code class="language-bash">deactivate
</code></pre>
<h3 id="安装-virtualenvwrapper-扩展包">安装 virtualenvwrapper 扩展包</h3>
<blockquote>
<p>Virtaulenvwrapper 是 virtualenv 的扩展包，可以把新创建的环境记录下来，不需要每次启动虚拟环境时都执行一遍 source 命令，可以更方便的管理虚拟环境。<br>
它可以实现：<br>
1、将所有虚拟环境整合在一个目录下<br>
2、管理（新增，删除，复制）虚拟环境<br>
3、快速切换虚拟环境</p>
</blockquote>
<h3 id="安装-virtualenvwrapper">安装 virtualenvwrapper</h3>
<pre><code class="language-bash">pip install virtualenvwrapper 
pip3 install virtualenvwrapper 
</code></pre>
<blockquote>
<p>此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，里面有安装步骤，我们照着操作把环境设置好。</p>
</blockquote>
<h3 id="创建存放虚拟环境的目录">创建存放虚拟环境的目录</h3>
<pre><code class="language-bash">mkdir $HOME/.virtualenvs
</code></pre>
<h3 id="进入-用户主目录打开-bashrc-文件添加如下代码">进入 用户主目录，打开 .bashrc 文件，添加如下代码</h3>
<pre><code class="language-bash">export WORKON_HOME=$HOME/.virtualenvs
#export PROJECT_HOME=$HOME/Devel
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh
</code></pre>
<blockquote>
<p>WORKON_HOME： 告诉 virtualenvwrapper 在哪里放置你的虚拟环境，默认是在 $HOME/.virtualenvs 目录下。如果这个目录不存在，virtualenvwrapper 运行的时候会自动创建它。<br>
PROJECT_HOME ：告诉virtualenvwrapper在哪里存放你的项目的工作目录</p>
</blockquote>
<h3 id="执行-source-命令使刚添加的代码生效">执行 source 命令，使刚添加的代码生效</h3>
<pre><code class="language-bash">source .bashrc
</code></pre>
<h3 id="使用-virtualenvwrapper">使用 virtualenvwrapper</h3>
<p>虚拟环境相关操作：</p>
<ul>
<li>lsvirtualenv: 列出虚拟环境列表(个人喜欢用第二个)</li>
<li>workon+Enter: 列出虚拟环境列表</li>
<li>mkvirtualenv [虚拟环境名称]: 新建虚拟环境</li>
<li>workon [虚拟环境名称]: 切换虚拟环境</li>
<li>rmvirtualenv [虚拟环境名称]: 删除虚拟环境</li>
<li>deactivate: 离开虚拟环境</li>
</ul>
<p>参考：<br>
<a href="https://segmentfault.com/a/1190000015885508">python的虚拟环境</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[手写JS函数的call、apply、bind实现]]></title>
        <id>https://just4city.github.io/post/shou-xie-js-han-shu-de-callapplybind-shi-xian/</id>
        <link href="https://just4city.github.io/post/shou-xie-js-han-shu-de-callapplybind-shi-xian/">
        </link>
        <updated>2019-12-03T07:18:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="call">call</h3>
<pre><code class="language-javascript">/**
 * 自定义call实现
 * @param context   上下文this对象
 * @param args      动态参数
 */
Function.prototype.ownCall = function(context, ...args) {
  context = (typeof context === 'object' ? context : window)
  // 防止覆盖掉原有属性
  const key = Symbol()
  // 这里的this为需要执行的方法
  context[key] = this
  // 方法执行
  const result = context[key](...args)
  delete context[key]
  return result
}

// 验证样例
function fun(arg1, arg2) {
  console.log(this.name)
  console.log(arg1 + arg2)
}
const _this = { name: 'YIYING' }
// 接受的是一个参数列表;方法立即执行
fun.ownCall(_this, 1, 2)

// 输出：
YIYING
3

</code></pre>
<h3 id="apply">apply</h3>
<pre><code class="language-javascript">/**
 * 自定义Apply实现
 * @param context   上下文this对象
 * @param args      参数数组
 */
Function.prototype.ownApply = function(context, args) {
  context = (typeof context === 'object' ? context : window)
  // 防止覆盖掉原有属性
  const key = Symbol()
  // 这里的this为需要执行的方法
  context[key] = this
  // 方法执行
  const result = context[key](...args)
  delete context[key]
  return result
}

// 验证样例
function fun(arg1, arg2) {
  console.log(this.name)
  console.log(arg1 + arg2)
}
const _this = { name: 'YIYING' }
// 参数为数组;方法立即执行
fun.ownApply(_this, [1, 2])

// 输出：
YIYING
3
</code></pre>
<h3 id="bind">bind</h3>
<pre><code class="language-javascript">/**
 * 自定义bind实现
 * @param context     上下文
 * @returns {Function}
 */
Function.prototype.ownBind = function(context) {
  context = (typeof context === 'object' ? context : window)
  return (...args)=&gt;{
    this.call(context, ...args)
  }
}

// 验证样例
function fun(arg1, arg2) {
  console.log(this.name)
  console.log(arg1 + arg2)
}
const _this = { name: 'YIYING' }
// 只变更fun中的this指向，返回新function对象
const newFun = fun.ownBind(_this)
newFun(1, 2)

// 输出：
YIYING
3
</code></pre>
<p>参考:<br>
<a href="https://juejin.im/post/5de3881ee51d4501b9561ada?utm_source=gold_browser_extension">手写JS函数的call、apply、bind实现</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue.config.js别名配置]]></title>
        <id>https://just4city.github.io/post/vueconfigjs-bie-ming-pei-zhi/</id>
        <link href="https://just4city.github.io/post/vueconfigjs-bie-ming-pei-zhi/">
        </link>
        <updated>2019-12-02T13:15:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="配置别名alias">配置别名alias</h3>
<pre><code class="language-javascript">chainWebpack: config =&gt; {
    // 别名
    config.resolve.alias
        .set('@', resolve('src'))
        .set('@assets',resolve('src/assets'))
        .set('@images',resolve('src/assets/images'));
</code></pre>
<h3 id="在style标签中使用background引用图片可正确解析路径">在<code>style</code>标签中，使用<code>background</code>引用图片可正确解析路径</h3>
<pre><code class="language-css">.footer .button_wrap .icon1 {
    background: url(&quot;~@images/main_ic_index_off.png&quot;) no-repeat center center;
        background-size: 100% 100%;
}
</code></pre>
<h3 id="在-webstorm-中配置能够识别-vue-cli-3-创建的项目的别名">在 WebStorm 中，配置能够识别 Vue CLI 3 创建的项目的别名@</h3>
<p>方法1：项目根目录创建一个文件 alias.config.js：</p>
<pre><code class="language-javascript">const resolve = dir =&gt; require('path').join(__dirname, dir);

module.exports = {
    resolve: {
        alias: {
            '@': resolve('src'),
            '@assets': resolve('src/assets'),
            '@images': resolve('src/assets/images')
        }
    }
};
</code></pre>
<p>方法2：直接引入文件<code>项目目录\node_modules\@vue\cli-service\webpack.config.js</code>即可</p>
<p>两个方法都需要在Webstrom中进行设置</p>
<figure data-type="image" tabindex="1"><img src="https://i.imgur.com/KGAY5NO.png" alt="" loading="lazy"></figure>
<p>参考：<br>
<a href="https://juejin.im/post/5c9477ad6fb9a070ce31b050">在 WebStorm 中，配置能够识别 Vue CLI 3 创建的项目的别名 alias @</a><br>
<a href="https://www.cnblogs.com/CyLee/p/8438824.html">webpack 使用别名（resolve.alias）解决scss @import相对路径导致的问题</a></p>
]]></content>
    </entry>
</feed>